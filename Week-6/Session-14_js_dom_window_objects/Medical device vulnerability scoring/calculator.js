// ScoreFinal = Scope * (3.326258289 * Base + 1.1 * Exploitability);

// Defining all the hardcoded values
const level = {
  N: 0,
  L: 1,
  H: 2,
};

const scope = {
  scope_U: 1.0,
  scope_C: 1.08,
};

const senitivityCofidentiality = [
  [0, 0.22, 0.56],
  [0, 0.65, 0.75],
  [0, 0.85, 0.95],
];

const healthIntegrity = [
  [0, 0.22, 0.56],
  [0.55, 0.6, 0.75],
  [0.85, 0.9, 0.95],
];

const healthAvailability = [
  [0, 0.22, 0.56],
  [0.55, 0.6, 0.65],
  [0.85, 0.9, 0.95],
];
const vector = {
  AV_N: 0.85,
  AV_A: 0.62,
  AV_L: 0.55,
  AV_P: 0.2,
};

const complexity = {
  AC_L: 0.77,
  AC_H: 0.44,
};

const required = {
  PR_N: 0.85,
  PR_L: 0.62,
  PR_H: 0.27,
};

const intersection = {
  UI_N: 0.85,
  UI_R: 0.62,
};

// creating event listener for all the input tags
const nodes = document.querySelectorAll("input");
nodes.forEach((node) => {
  node.addEventListener("click", function (event) {
    console.log(event.target);
    updateScore(event.target.name, event.target.value);
  });
});

const selected = {
  sens: -1,
  conf: -1,
  scope: 0,
  integ: -1,
  avail: -1,
  health: -1,
  vector: 0,
  complex: 0,
  req: 0,
  inter: 0,
};

// update score method calls on every on click event and the score gets updated accordingly
function updateScore(name, id) {
  document.getElementById("warning").style.visibility = "hidden";
  if (name === "scope") {
    selected.scope = scope[id];
  } else if (name === "AV") {
    selected.vector = vector[id];
  } else if (name === "AC") {
    selected.complex = complexity[id];
  } else if (name === "PR") {
    selected.req = required[id];
  } else if (name === "UI") {
    selected.inter = intersection[id];
  } else {
    selected[name] = level[id.split("_")[1]];
  }

  const confidentiality =
    selected.sens !== -1 && selected.conf !== -1
      ? senitivityCofidentiality[selected.sens][selected.conf]
      : 0;

  const integrity =
    selected.health !== -1 && selected.integ !== -1
      ? healthIntegrity[selected.health][selected.integ]
      : 0;

  const availability =
    selected.health !== -1 && selected.avail !== -1
      ? healthAvailability[selected.health][selected.avail]
      : 0;

  const base = confidentiality + integrity + availability;
  const exploitability =
    selected.vector + selected.complex + selected.req + selected.inter;
  let finalScore = selected.scope * (3.326258289 * base + 1.1 * exploitability);

  document.getElementById("score").innerText = finalScore.toFixed(1);
}
